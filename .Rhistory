xmlSize(xmltop[[2]]) #number of nodes in each child
xmlSApply(xmltop[[2]], xmlName) #name(s)
xmlSApply(xmltop[[2]], xmlSize) #size
xmlSApply(xmltop[[1]], xmlAttrs) #attribute(s)
x = unlist(xmltop[[2]])
x
x = unlist(xmltop[[2]][[1]])
x
x = unlist(xmltop[[2]][[1]][[1]])
x
xmltop[[2]][[1]][[1]]
xmltop[[2]][[1]]
library(plyr)
Madhu2012=ldply(xmlToList("data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml"), data.frame) #completes with errors: "row names were found from a short variable and have been discarded"
Madhu2012
xmltop[[FHRSEstablishment]]
xmltop[[FHRSEstablishment]]
xmlName(xmltop[[2]])
xmltop[[EstablishmentCollection]]
xmltop[[1]]
xmlName(xmltop[[2]]) #name of root 2
xmlName(xmltop[[1]]) #name of root 2
xmlName(xmltop[[2]]) #name of root 2
xmlSize(xmlName(xmltop[[2]]))
xmltop[[2]][[1]]
x = unlist(xmltop[[2]][[1]][[3]])
xmltop[[2]][[1]][[3]]
require("XML")
require("plyr")
library(XML)
library(plyr)
# library(tidyverse)
data <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
xmltop = xmlRoot(data)
xmltop[[2]][[1]]
Madhu2012=ldply(xmlToList("data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml"), data.frame)
library(tidyverse)
x <- xmltop[[2]][[1]] # content of root 2
unlist(x)
aslist(x)
list(x)
library(xml2)
data <- read_xml(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
recs <- xml_find_all(data, "//record")
library(XML)
myData = xmlToDataFrame(data, stringsAsFactors = FALSE,) %>%
mutate_all(~type.convert(., as.is = T))
library(XML)
library(dplyr)
xml_doc <-"
<DATA>
<RECORD>
<VAR1>string1</VAR1>
<VAR2>1</VAR2>
<VAR3>2.3</VAR3>
<VAR4>TRUE</VAR4>
</RECORD>
<RECORD>
<VAR1>string2</VAR1>
<VAR2>2</VAR2>
<VAR3>3.4</VAR3>
<VAR4>FALSE</VAR4>
</RECORD>
<RECORD>
<VAR1>string3</VAR1>
<VAR2>3</VAR2>
<VAR3>4.5</VAR3>
<VAR4>TRUE</VAR4>
</RECORD>
</DATA>"
myXML = xmlParse(xml_doc)
myData = xmlToDataFrame(myXML, stringsAsFactors = FALSE,) %>%
mutate_all(~type.convert(., as.is = T))
View(myData)
myData = xmlToDataFrame(data, stringsAsFactors = FALSE,) %>%
mutate_all(~type.convert(., as.is = T))
library(XML)
library(tidyverse)
# library(tidyverse)
data <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
# class(data)
# # xml_data <- xmlToList(data)
# #
# # fhrsid <- unlist(xml_data[["EstablishmentCollection"]][["EstablishmentDetail"]][["FHRSID"]])
# #
#
# # Look at first node
# xmltop = xmlRoot(data)
# xmlName(xmltop) #"FHRSEstablishment"
# xmlSize(xmltop) #2 children
# xmlName(xmltop[[2]]) #name of root 2
#
# x <- xmltop[[2]][[1]] # content of root 2
#
# list(x)
#
#
# # https://www.informit.com/articles/article.aspx?p=2215520
#Explore Root 2
myData <- xmlToDataFrame(data, stringsAsFactors = FALSE,) %>%
mutate_all(~type.convert(., as.is = T))
View(myData)
clacks <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Clackmannanshire_Council.xml")
clacks_root = xmlRoot(clacks)
clacks_root
clacks[[1]]
clacks_root[[2]]
clacks_data <- xmlToDataFrame(clacks_root[[2]], stringsAsFactors = FALSE,) %>%
mutate_all(~type.convert(., as.is = T))
mutate_all(~type.convert(., as.is = T))
View(clacks_data)
xmlName(clacks_root) #"FHRSEstablishment"
xmlSize(clacks_root) #2 children
View(clacks_data)
class(clacks_data$RatingDate)
clacks_data <- xmlToDataFrame(clacks_root[[2]], stringsAsFactors = TRUE,) %>%
mutate_all(~type.convert(., as.is = T))
View(clacks_data)
class(clacks_data$RatingDate)
clacks_data <- xmlToDataFrame(clacks_root[[2]], stringsAsFactors = FALSE) %>%
mutate_all(~type.convert(., as.is = T))
View(clacks_data)
library(XML)
library(tidyverse)
# library(tidyverse)
data <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
#Explore Root 2
myData <- xmlToDataFrame(data, stringsAsFactors = FALSE,) %>%
mutate_all(~type.convert(., as.is = T))
#bring in XML file
clacks <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Clackmannanshire_Council.xml")
clacks_root = xmlRoot(clacks)  #open xml and find fist node
xmlName(clacks_root) #"FHRSEstablishment"
xmlSize(clacks_root) #2 children
xmlName(clacks_root[[2]]) #name of root 2
clacks_root[[2]] #Take to node I want to extract
# create dataframe
clacks_data <- xmlToDataFrame(clacks_root[[2]], stringsAsFactors = FALSE)
View(clacks_data)
class(clacks_data$RatingDate)
View(clacks_data)
class(clacks_data$FHRSID)
library(XML)
library(tidyverse)
# library(tidyverse)
data <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
#Explore Root 2
myData <- xmlToDataFrame(data, stringsAsFactors = FALSE,) %>%
mutate_all(~type.convert(., as.is = T))
library(XML)
library(tidyverse)
# library(tidyverse)
angus<- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
#Explore Root 2
myData <- xmlToDataFrame(angus[[2]], stringsAsFactors = FALSE,)
clacks <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Clackmannanshire_Council.xml")
clacks_root = xmlRoot(clacks)  #open xml and find fist node
xmlName(clacks_root) #"FHRSEstablishment"
xmlSize(clacks_root) #2 children
xmlName(clacks_root[[2]]) #name of root 2
clacks_root[[2]] #Take to node I want to extract
# create dataframe
clacks_data <- xmlToDataFrame(clacks_root[[2]], stringsAsFactors = FALSE)
View(clacks_data)
class(clacks_data$FHRSID)
clacks <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Clackmannanshire_Council.xml")
clacks_root = xmlRoot(clacks)  #open xml and find fist node
xmlName(clacks_root) #"FHRSEstablishment"
xmlSize(clacks_root) #2 children
xmlName(clacks_root[[2]]) #name of root 2
clacks_root[[2]] #Take to node I want to extract
# create dataframe
clacks_data <- xmlToDataFrame(clacks_root[[2]])
class(clacks_data$FHRSID)
add_xml_data <- function(xml_update){
xml_root <- xmlRoot(xml_data)
new_xml_data <- xmlToDataFrame(xml_root [[2]], stringsAsFactors = FALSE)
xml_data = rbind(xml_data, new_xml_data)
}
library(XML)
library(tidyverse)
# library(tidyverse)
#bring in XML file
clacks <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Clackmannanshire_Council.xml")
clacks_root = xmlRoot(clacks)  #open xml and find fist node / starting point
xmlName(clacks_root) #"FHRSEstablishment"
xmlSize(clacks_root) #2 children
xmlName(clacks_root[[2]]) #name of root 2
clacks_root[[2]] #Take to node I want to extract
# create dataframe
xml_data <- xmlToDataFrame(clacks_root[[2]], stringsAsFactors = FALSE)
# %>%
#   mutate_all(~type.convert(., as.is = T))
nrow(xml_data)
class(xml_data$FHRSID)
angus <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
add_xml_data <- function(xml_update){
xml_root <- xmlRoot(xml_data)
new_xml_data <- xmlToDataFrame(xml_root [[2]], stringsAsFactors = FALSE)
xml_data = rbind(xml_data, new_xml_data)
}
add_xml_data(angus)
library(XML)
library(tidyverse)
# library(tidyverse)
#bring in XML file
clacks <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Clackmannanshire_Council.xml")
clacks_root = xmlRoot(clacks)  #open xml and find fist node / starting point
xmlName(clacks_root) #"FHRSEstablishment"
xmlSize(clacks_root) #2 children
xmlName(clacks_root[[2]]) #name of root 2
clacks_root[[2]] #Take to node I want to extract
# create dataframe
xml_data <- xmlToDataFrame(clacks_root[[2]], stringsAsFactors = FALSE)
# %>%
#   mutate_all(~type.convert(., as.is = T))
nrow(xml_data) #537
class(xml_data$FHRSID) # character
angus <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
add_xml_data <- function(xml_update){
xml_root <- xmlRoot(xml_update)
new_xml_data <- xmlToDataFrame(xml_root [[2]], stringsAsFactors = FALSE)
xml_data = rbind(xml_data, new_xml_data)
}
add_xml_data(angus)
nrow(xml_data)
add_xml_data <- function(xml_update){
xml_root <- xmlRoot(xml_update)
new_xml_data <- xmlToDataFrame(xml_root [[2]], stringsAsFactors = FALSE)
return rbind(xml_data, new_xml_data)
}
library(XML)
library(tidyverse)
# library(tidyverse)
#bring in XML file
clacks <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Clackmannanshire_Council.xml")
clacks_root = xmlRoot(clacks)  #open xml and find fist node / starting point
xmlName(clacks_root) #"FHRSEstablishment"
xmlSize(clacks_root) #2 children
xmlName(clacks_root[[2]]) #name of root 2
clacks_root[[2]] #Take to node I want to extract
# create dataframe
xml_data <- xmlToDataFrame(clacks_root[[2]], stringsAsFactors = FALSE)
# %>%
#   mutate_all(~type.convert(., as.is = T))
nrow(xml_data) #537
class(xml_data$FHRSID) # character
#NOW... can I create a function to add to dataframe
# try other log files
angus <- xmlParse(file = "data/Food_Hygiene_Information_Scheme_-_Angus_Council.xml")
add_xml_data <- function(xml_update){
xml_root <- xmlRoot(xml_update)
new_xml_data <- xmlToDataFrame(xml_root [[2]], stringsAsFactors = FALSE)
bound_rows <- rbind(xml_data, new_xml_data)
return(bound_rows)
}
xml_data <- add_xml_data(angus)
nrow(xml_data)
View(xml_data)
nrow(xml_data)
log = read.table("data/log_file.log")
library(readr)
library(readr)
log <- read_tsv("data/log_file.log")
View(log)
library(readr)
log <- read_delim("data/log_file.log", delim =" ")
View(log)
log <- read_delim("data/log_file.log", delim =" ", skip = 1)
View(log)
log <- read_delim("data/log_file.log", delim =" ", skip = 2)
View(log)
library(readr)
log <- read_delim("data/log_file.log", skip = 1,  delim =" ")
View(log)
library(readr)
log <- read_delim("data/log_file.log", skip = 2,  delim =" ")
View(log)
log <- read_delim("data/log_file.log", col_names = FALSE,  delim =" ")
View(log)
log <- read_tsv("data/log_file.log", col_names = FALSE,  skip = 2)
View(log)
log <- read_delim("data/log_file.log", delim = " ",col_types = NULL,  skip = 2)
View(log)
log <- read_table("data/log_file.log")
View(log)
log <- read_delim("data/log_file.log", delim = " ", col_names = c("Date", "Time", "About", "Detail", "Extra"))
View(log)
library(readr)
log <- read_delim("data/log_file.log", delim = " ", col_names = c("Date", "Time", "About", "Detail", "Extra", "Extra2"))
View(log)
log <- read_delim("data/log_file.log", delim = " ", col_names = c("Date", "Time", "About", "Detail", "Extra", "Extra2", "Extra3"))
View(log)
log <- read_tsv("data/log_file.log", col_names = c("Date", "Time", "About", "Detail", "Extra", "Extra2", "Extra3"))
View(log)
log <- read_tsv("data/log_file.log")
View(log)
log <- read_tsv("data/log_file.log") %>%
rename(log_data = .log)
View(log)
log <- read_tsv("data/log_file.log") %>%
rename("log_data" = ".log")
View(log)
log <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
View(log)
log <- read_tsv("data/log_file.log", colnames = "log_data")
View(log)
log <- read_tsv("data/log_file.log", skip = 1, colnames = "log_data")
View(log)
log <- read_tsv("data/log_file.log", skip = 2, colnames = "log_data")
View(log)
library(readr)
log <- read_tsv("data/log_file.log", colnames = "log_data") %>%
janitor::clean_names()
View(log)
library(readr)
log <- read_tsv("data/log_file.log", colnames = "log_data") %>%
janitor::clean_names()
library(readr)
library(tidyverse)
log <- read_tsv("data/log_file.log", colnames = "log_data") %>%
janitor::clean_names()
library(readr)
library(tidyverse)
log <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
View(log)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
View(log_file)
log_file <- log_file %>%
mutate(date = substr(1, 14))
View(log_file)
log_file <- log_file %>%
mutate(date = substr(log_file, 1, 14))
View(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file)
class(log_file$log)
log_file$log[2]
library(readr)
library(tidyverse)
library(stringr)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
log_file <- log_file %>%
mutate(date = substr(log_file, 1, 14))
View(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file$log[2]
log_file <- log_file %>%
mutate(date = str_sub(log_file, 1, 14))
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file$log[2]
log_file <- log_file %>%
mutate(date = str_sub(1, 14))
View(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file$log[2]
log_file <- log_file %>%
mutate(date = str_sub(log, 1, 14))
View(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file$log[2]
log_file <- log_file %>%
mutate(date = str_sub(log, 1, 5)) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(action = str_sub(log, 16, 23))
View(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file$log[2]
log_file <- log_file %>%
mutate(date = str_sub(log, 1, 5)) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(action = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1))
View(log_file)
log_file$detail[3]
log_file$detail[4]
view(log_file)
log_file$detail[14]
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file$log[2]
log_file <- log_file %>%
mutate(date = str_sub(log, 1, 5)) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(action = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1))
log_file = log_file[nchar(log_file$date) > 2]
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file$log[2]
log_file <- log_file %>%
mutate(date = str_sub(log, 1, 5)) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(action = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1))
log_file = log_file[nchar(log_file$date, type = "chars") > 2]
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file$log[2]
log_file <- log_file %>%
mutate(date = str_sub(log, 1, 5)) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(action = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1)) %>%
filter(nchar(date) >2)
view(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file <- log_file %>%
mutate(date = str_sub(log, 1, 5)) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(action = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1)) %>%
filter(nchar(date) >2) #remove order numbers so only have rows with a date
# remove spaces from character
# REGEX extract ip address
# filter warning and ... if failed
# convert to date and time
# try other log files
# count common words
# create git repo
view(log_file)
library(lubridate)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file <- log_file %>%
mutate(date = str_sub(log, 1, 5, collapse = "")) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(info = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1)) %>%
filter(nchar(date) >2) #remove order numbers so only have rows with a date
# remove spaces from character
# REGEX extract ip address
# filter warning and ... if failed
# convert to date and time
# try other log files
# count common words
# create git repo
view(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file <- log_file %>%
mutate(date = str_replace_all(str_sub(log, 1, 5), space(), "")) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(info = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1)) %>%
filter(nchar(date) >2) #remove order numbers so only have rows with a date
# remove spaces from character
# REGEX extract ip address
# filter warning and ... if failed
# convert to date and time
# try other log files
# count common words
# create git repo
view(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file <- log_file %>%
mutate(date = str_replace_all(str_sub(log, 1, 5)," ", "")) %>%
mutate(time = str_sub(log, 6, 15)) %>%
mutate(info = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1)) %>%
filter(nchar(date) >2) #remove order numbers so only have rows with a date
# remove spaces from character
# REGEX extract ip address
# filter warning and ... if failed
# convert to date and time
# try other log files
# count common words
# create git repo
view(log_file)
nchar(log_file$time[3])
view(log_file)
log_file <- read_tsv("data/log_file.log") %>%
janitor::clean_names()
class(log_file$log)
log_file <- log_file %>%
mutate(date = str_replace_all(str_sub(log, 1, 5)," ", "")) %>%
mutate(time = str_replace_all(str_sub(log, 6, 15)," ", "")) %>%
mutate(info = str_sub(log, 16, 22)) %>%
mutate(detail = str_sub(log, 23, -1)) %>%
filter(nchar(date) >2) #remove order numbers so only have rows with a date
# remove spaces from character
# REGEX extract ip address
# filter warning and ... if failed
# convert to date and time
# try other log files
# count common words
# create git repo
nchar(log_file$time[3])
